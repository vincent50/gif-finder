{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GridGifCard.js","components/GridGif.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GridGifCard","className","src","alt","GridGif","loading","state","setstate","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAKhB,SACI,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAlBkB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC2EC,UAAWH,GADtF,sBAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAadM,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAD,IAAEJ,EAAF,EAAEA,GAAIT,EAAN,EAAMA,IAAKU,EAAX,EAAWA,MAAX,OACvB,sBAAKI,UAAU,yCAAf,UACE,qBAAcC,IAAKf,EAAKgB,IAAKN,GAAnBD,GACV,4BAAIC,QCDGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgBxC,OATEC,qBAAW,WACTxB,EAAQC,GACPwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACtBf,KAAMkB,EACNL,SAAS,SAEV,CAAEpB,IAGAqB,EDb0BK,CAAa1B,GAAjCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,gBACZ,qBAAKJ,UAAU,YAAf,SACMH,EAAOJ,KAAK,SAAAkB,GAAK,OACjB,cAAC,EAAD,eAEMA,GADCA,EAAMhB,aEkBViB,EA7BM,WAAM,MAGW1C,mBAAS,CAAC,YAHrB,mBAGlBQ,EAHkB,KAGNT,EAHM,KASzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEIS,EAAWe,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MClBrB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ad3c551f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (inputValue.trim().length > 0) {\n      setCategories( categories => [inputValue, ...categories])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n        <input \n          type='text'\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=ChtUlJb5JLyvTPqDf7Ws4cwQhGdmEFAh&q=${ encodeURI( category ) }&limit=10`\n  const resp = await fetch(url)\n  const {data} = await resp.json()\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs\n}","import React from 'react'\n\nexport const GridGifCard = ({id, url, title}) => (\n    <div className='card animate__animated animate__fadeIn'>\n      <img key={id} src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n)\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GridGifCard } from './GridGifCard'\n\nexport const GridGif = ({ category }) => {\n\n  const { data:images, loading } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n      {loading && 'cargando data' }\n      <div className='card-grid'>\n          { images.map( image => (\n            <GridGifCard \n              key={image.id} \n              {...image} \n            />\n          )) }\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../components/helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n  \n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  })\n\n    useEffect( () => {\n      getGifs(category)\n      .then( imgs => setstate({\n        data: imgs,\n        loading: false,\n      }))\n    }, [ category ] // componentDidMount\n  )\n\n  return state\n}\n","import React, { useState } from 'react';\nimport {AddCategory} from './components/AddCategory';\nimport { GridGif } from './components/GridGif';\n\nconst GifExpertApp = () => {\n\n  // const categories = ['One Punch Man', 'Samurai X', 'Hunter X']\n  const [categories, setCategories] = useState(['Gintama'])\n\n  // const handleAdd = () => {\n  //   setCategories([...categories, 'Gintama'])\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories}/>\n      <hr/>\n      {/* <button onClick={handleAdd}>Agregar</button> */}\n      <ol>\n        { \n          categories.map((category) => (\n              <GridGif\n                key={category} \n                category={category} \n              />\n          )) \n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}